
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000006c6  0000075a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006c  0080006c  00000766  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000766  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001262  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fc  00000000  00000000  00001b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf7  00000000  00000000  00002592  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  0000318c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ca  00000000  00000000  000034c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a6f  00000000  00000000  00003a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004501  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 aa 01 	call	0x354	; 0x354 <main>
  8a:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
uint8_t button = 0;


void app_init()
{
	MCUCR |= (1<<1);  // set int0 to work on falling edge 
  92:	85 b7       	in	r24, 0x35	; 53
  94:	82 60       	ori	r24, 0x02	; 2
  96:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<0);
  98:	85 b7       	in	r24, 0x35	; 53
  9a:	8e 7f       	andi	r24, 0xFE	; 254
  9c:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<6);
  9e:	8b b7       	in	r24, 0x3b	; 59
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	8b bf       	out	0x3b, r24	; 59
	sei();
  a4:	78 94       	sei
	//timer1_delay(500,1024, &button);

	LED_init(Led_Green1);
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	81 e4       	ldi	r24, 0x41	; 65
  aa:	0e 94 9b 01 	call	0x336	; 0x336 <LED_init>
	LED_init(Led_Yellow1);
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	81 e4       	ldi	r24, 0x41	; 65
  b2:	0e 94 9b 01 	call	0x336	; 0x336 <LED_init>
	LED_init(Led_Red1);
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	81 e4       	ldi	r24, 0x41	; 65
  ba:	0e 94 9b 01 	call	0x336	; 0x336 <LED_init>

	LED_init(Led_Green2);
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	82 e4       	ldi	r24, 0x42	; 66
  c2:	0e 94 9b 01 	call	0x336	; 0x336 <LED_init>
	LED_init(Led_Yellow2);
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	82 e4       	ldi	r24, 0x42	; 66
  ca:	0e 94 9b 01 	call	0x336	; 0x336 <LED_init>
	LED_init(Led_Red2);
  ce:	62 e0       	ldi	r22, 0x02	; 2
  d0:	82 e4       	ldi	r24, 0x42	; 66
  d2:	0e 94 9b 01 	call	0x336	; 0x336 <LED_init>


	LED_off(Led_Green1);
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	81 e4       	ldi	r24, 0x41	; 65
  da:	0e 94 a3 01 	call	0x346	; 0x346 <LED_off>
	LED_off(Led_Yellow1);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	81 e4       	ldi	r24, 0x41	; 65
  e2:	0e 94 a3 01 	call	0x346	; 0x346 <LED_off>
	LED_off(Led_Red1);
  e6:	62 e0       	ldi	r22, 0x02	; 2
  e8:	81 e4       	ldi	r24, 0x41	; 65
  ea:	0e 94 a3 01 	call	0x346	; 0x346 <LED_off>

	LED_off(Led_Green2);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	82 e4       	ldi	r24, 0x42	; 66
  f2:	0e 94 a3 01 	call	0x346	; 0x346 <LED_off>
	LED_off(Led_Yellow2);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	82 e4       	ldi	r24, 0x42	; 66
  fa:	0e 94 a3 01 	call	0x346	; 0x346 <LED_off>
	LED_off(Led_Red2);
  fe:	62 e0       	ldi	r22, 0x02	; 2
 100:	82 e4       	ldi	r24, 0x42	; 66
 102:	0e 94 a3 01 	call	0x346	; 0x346 <LED_off>

	BUTTON_init(Port_D,2);
 106:	62 e0       	ldi	r22, 0x02	; 2
 108:	84 e4       	ldi	r24, 0x44	; 68
 10a:	0e 94 97 01 	call	0x32e	; 0x32e <BUTTON_init>
 10e:	08 95       	ret

00000110 <app_start>:
}

void app_start()
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	00 d0       	rcall	.+0      	; 0x116 <app_start+0x6>
 116:	00 d0       	rcall	.+0      	; 0x118 <app_start+0x8>
 118:	1f 92       	push	r1
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62

	

	volatile Timer timer={normal,11,1024};
 11e:	85 e0       	ldi	r24, 0x05	; 5
 120:	e6 e6       	ldi	r30, 0x66	; 102
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	de 01       	movw	r26, r28
 126:	11 96       	adiw	r26, 0x01	; 1
 128:	01 90       	ld	r0, Z+
 12a:	0d 92       	st	X+, r0
 12c:	8a 95       	dec	r24
 12e:	e1 f7       	brne	.-8      	; 0x128 <app_start+0x18>
	timer1_init(timer);
 130:	49 81       	ldd	r20, Y+1	; 0x01
 132:	5a 81       	ldd	r21, Y+2	; 0x02
 134:	6b 81       	ldd	r22, Y+3	; 0x03
 136:	7c 81       	ldd	r23, Y+4	; 0x04
 138:	8d 81       	ldd	r24, Y+5	; 0x05
 13a:	0e 94 48 03 	call	0x690	; 0x690 <timer1_init>
	
	while (1)
	{
		uint8_t temp = 0;
		
		LED_on(Port_A, arr[Car_Light_Turn]);
 13e:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <Car_Light_Turn>
 142:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <Car_Light_Turn+0x1>
 146:	e0 5a       	subi	r30, 0xA0	; 160
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	60 81       	ld	r22, Z
 14c:	81 e4       	ldi	r24, 0x41	; 65
 14e:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_on>
		LED_on(Port_B, Ped_Light_Turn);
 152:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Ped_Light_Turn>
 156:	82 e4       	ldi	r24, 0x42	; 66
 158:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_on>
		if(Ped_Green)
 15c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Ped_Green>
 160:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Ped_Green+0x1>
 164:	89 2b       	or	r24, r25
 166:	21 f0       	breq	.+8      	; 0x170 <app_start+0x60>
		LED_on(Port_B, 0);
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	82 e4       	ldi	r24, 0x42	; 66
 16c:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_on>
		timer0_start(timer);
 170:	49 81       	ldd	r20, Y+1	; 0x01
 172:	5a 81       	ldd	r21, Y+2	; 0x02
 174:	6b 81       	ldd	r22, Y+3	; 0x03
 176:	7c 81       	ldd	r23, Y+4	; 0x04
 178:	8d 81       	ldd	r24, Y+5	; 0x05
 17a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <timer0_start>
	volatile Timer timer={normal,11,1024};
	timer1_init(timer);
	
	while (1)
	{
		uint8_t temp = 0;
 17e:	10 e0       	ldi	r17, 0x00	; 0
		LED_on(Port_A, arr[Car_Light_Turn]);
		LED_on(Port_B, Ped_Light_Turn);
		if(Ped_Green)
		LED_on(Port_B, 0);
		timer0_start(timer);
		while (temp != 20 && !button)
 180:	25 c0       	rjmp	.+74     	; 0x1cc <app_start+0xbc>
		{
			while (!timer0_state() && !button);
 182:	0e 94 35 03 	call	0x66a	; 0x66a <timer0_state>
 186:	81 11       	cpse	r24, r1
 188:	04 c0       	rjmp	.+8      	; 0x192 <app_start+0x82>
 18a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 18e:	88 23       	and	r24, r24
 190:	c1 f3       	breq	.-16     	; 0x182 <app_start+0x72>
			temp++;
 192:	1f 5f       	subi	r17, 0xFF	; 255
			TCNT0 = timer.initial;
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	9b 81       	ldd	r25, Y+3	; 0x03
 198:	82 bf       	out	0x32, r24	; 50
			Set_bit(TIFR, 0);
 19a:	88 b7       	in	r24, 0x38	; 56
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	88 bf       	out	0x38, r24	; 56

			if (arr[Car_Light_Turn] == 1)
 1a0:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <Car_Light_Turn>
 1a4:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <Car_Light_Turn+0x1>
 1a8:	e0 5a       	subi	r30, 0xA0	; 160
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	60 81       	ld	r22, Z
 1ae:	61 30       	cpi	r22, 0x01	; 1
 1b0:	19 f4       	brne	.+6      	; 0x1b8 <app_start+0xa8>
			LED_toggle(Port_A, arr[Car_Light_Turn]);
 1b2:	81 e4       	ldi	r24, 0x41	; 65
 1b4:	0e 94 a7 01 	call	0x34e	; 0x34e <LED_toggle>
			if (Ped_Light_Turn == 1)
 1b8:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Ped_Light_Turn>
 1bc:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <Ped_Light_Turn+0x1>
 1c0:	61 30       	cpi	r22, 0x01	; 1
 1c2:	71 05       	cpc	r23, r1
 1c4:	19 f4       	brne	.+6      	; 0x1cc <app_start+0xbc>
			LED_toggle(Port_B, Ped_Light_Turn);
 1c6:	82 e4       	ldi	r24, 0x42	; 66
 1c8:	0e 94 a7 01 	call	0x34e	; 0x34e <LED_toggle>
		LED_on(Port_A, arr[Car_Light_Turn]);
		LED_on(Port_B, Ped_Light_Turn);
		if(Ped_Green)
		LED_on(Port_B, 0);
		timer0_start(timer);
		while (temp != 20 && !button)
 1cc:	14 31       	cpi	r17, 0x14	; 20
 1ce:	21 f0       	breq	.+8      	; 0x1d8 <app_start+0xc8>
 1d0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 1d4:	88 23       	and	r24, r24
 1d6:	a9 f2       	breq	.-86     	; 0x182 <app_start+0x72>
			if (arr[Car_Light_Turn] == 1)
			LED_toggle(Port_A, arr[Car_Light_Turn]);
			if (Ped_Light_Turn == 1)
			LED_toggle(Port_B, Ped_Light_Turn);
		}
		timer0_stop();
 1d8:	0e 94 31 03 	call	0x662	; 0x662 <timer0_stop>
		LED_off(Port_A,arr[Car_Light_Turn]);
 1dc:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <Car_Light_Turn>
 1e0:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <Car_Light_Turn+0x1>
 1e4:	e0 5a       	subi	r30, 0xA0	; 160
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	60 81       	ld	r22, Z
 1ea:	81 e4       	ldi	r24, 0x41	; 65
 1ec:	0e 94 a3 01 	call	0x346	; 0x346 <LED_off>
		LED_off(Port_B,Ped_Light_Turn);
 1f0:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Ped_Light_Turn>
 1f4:	82 e4       	ldi	r24, 0x42	; 66
 1f6:	0e 94 a3 01 	call	0x346	; 0x346 <LED_off>
		if(Ped_Green)
 1fa:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Ped_Green>
 1fe:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Ped_Green+0x1>
 202:	89 2b       	or	r24, r25
 204:	21 f0       	breq	.+8      	; 0x20e <app_start+0xfe>
		LED_off(Port_B, 0);
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	82 e4       	ldi	r24, 0x42	; 66
 20a:	0e 94 a3 01 	call	0x346	; 0x346 <LED_off>
		
		if(!button){
 20e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 212:	81 11       	cpse	r24, r1
 214:	43 c0       	rjmp	.+134    	; 0x29c <app_start+0x18c>
			Car_Light_Turn = (++Car_Light_Turn) % 4;
 216:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Car_Light_Turn>
 21a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Car_Light_Turn+0x1>
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	83 70       	andi	r24, 0x03	; 3
 222:	90 78       	andi	r25, 0x80	; 128
 224:	99 23       	and	r25, r25
 226:	24 f4       	brge	.+8      	; 0x230 <app_start+0x120>
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	8c 6f       	ori	r24, 0xFC	; 252
 22c:	9f 6f       	ori	r25, 0xFF	; 255
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Car_Light_Turn+0x1>
 234:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Car_Light_Turn>
			if(Ped_Light_Turn == 0 && !Ped_Green){
 238:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Ped_Light_Turn>
 23c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Ped_Light_Turn+0x1>
 240:	00 97       	sbiw	r24, 0x00	; 0
 242:	89 f4       	brne	.+34     	; 0x266 <app_start+0x156>
 244:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <Ped_Green>
 248:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <Ped_Green+0x1>
 24c:	23 2b       	or	r18, r19
 24e:	59 f4       	brne	.+22     	; 0x266 <app_start+0x156>
				Ped_Light_Turn = 1;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Ped_Light_Turn+0x1>
 258:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Ped_Light_Turn>
				Ped_Green = 1;
 25c:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Ped_Green+0x1>
 260:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Ped_Green>
 264:	4a c0       	rjmp	.+148    	; 0x2fa <app_start+0x1ea>
			}
			else if(Ped_Light_Turn == 1 && Ped_Green){
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	91 05       	cpc	r25, r1
 26a:	89 f4       	brne	.+34     	; 0x28e <app_start+0x17e>
 26c:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <Ped_Green>
 270:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <Ped_Green+0x1>
 274:	23 2b       	or	r18, r19
 276:	59 f0       	breq	.+22     	; 0x28e <app_start+0x17e>
				Ped_Light_Turn = 2;
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Ped_Light_Turn+0x1>
 280:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Ped_Light_Turn>
				Ped_Green = 0;
 284:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Ped_Green+0x1>
 288:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Ped_Green>
 28c:	36 c0       	rjmp	.+108    	; 0x2fa <app_start+0x1ea>
			}
			else if(Ped_Light_Turn == 1)
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	a1 f5       	brne	.+104    	; 0x2fa <app_start+0x1ea>
			Ped_Light_Turn = 0;
 292:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Ped_Light_Turn+0x1>
 296:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Ped_Light_Turn>
 29a:	2f c0       	rjmp	.+94     	; 0x2fa <app_start+0x1ea>
		}
		else{
			if(Car_Light_Turn == 0){
 29c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Car_Light_Turn>
 2a0:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Car_Light_Turn+0x1>
 2a4:	00 97       	sbiw	r24, 0x00	; 0
 2a6:	59 f4       	brne	.+22     	; 0x2be <app_start+0x1ae>
				Car_Light_Turn = 1;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Car_Light_Turn+0x1>
 2b0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Car_Light_Turn>
				Ped_Light_Turn = 1;
 2b4:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Ped_Light_Turn+0x1>
 2b8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Ped_Light_Turn>
 2bc:	1e c0       	rjmp	.+60     	; 0x2fa <app_start+0x1ea>
			}
			else if (arr[Car_Light_Turn] == 1 && Ped_Light_Turn == 2){
 2be:	fc 01       	movw	r30, r24
 2c0:	e0 5a       	subi	r30, 0xA0	; 160
 2c2:	ff 4f       	sbci	r31, 0xFF	; 255
 2c4:	20 81       	ld	r18, Z
 2c6:	21 30       	cpi	r18, 0x01	; 1
 2c8:	91 f4       	brne	.+36     	; 0x2ee <app_start+0x1de>
 2ca:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <Ped_Light_Turn>
 2ce:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Ped_Light_Turn+0x1>
 2d2:	22 30       	cpi	r18, 0x02	; 2
 2d4:	31 05       	cpc	r19, r1
 2d6:	59 f4       	brne	.+22     	; 0x2ee <app_start+0x1de>
				Ped_Light_Turn = 1;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Ped_Light_Turn+0x1>
 2e0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Ped_Light_Turn>
				Car_Light_Turn = 1;
 2e4:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Car_Light_Turn+0x1>
 2e8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Car_Light_Turn>
 2ec:	06 c0       	rjmp	.+12     	; 0x2fa <app_start+0x1ea>
			}
			else if(Car_Light_Turn == 2){
 2ee:	02 97       	sbiw	r24, 0x02	; 2
 2f0:	21 f4       	brne	.+8      	; 0x2fa <app_start+0x1ea>
				Ped_Light_Turn = 0;
 2f2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Ped_Light_Turn+0x1>
 2f6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Ped_Light_Turn>
			}
		}

		button = 0;
 2fa:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
		//LED_on(Port_A, Car_Light_Turn);
		//timer1_delay(10000,prescale_1024);
		//LED_off(Port_A, Car_Light_Turn);
		//timer1_delay(5000,prescale_1024);
	}
 2fe:	1f cf       	rjmp	.-450    	; 0x13e <app_start+0x2e>

00000300 <__vector_1>:
}

ISR(EXT_INT_0){
 300:	1f 92       	push	r1
 302:	0f 92       	push	r0
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
	//timer1_stop();
	//if(!(arr[Car_Light_Turn] == 1 && Ped_Light_Turn==1))
	if(Ped_Light_Turn == 2)
 30e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Ped_Light_Turn>
 312:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Ped_Light_Turn+0x1>
 316:	02 97       	sbiw	r24, 0x02	; 2
 318:	19 f4       	brne	.+6      	; 0x320 <__vector_1+0x20>
	button = 1;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <BUTTON_init>:

#include "../../MCAL/Dio/dio.h"
#include "button.h"

void BUTTON_init(uint8_t ButtonPort,uint8_t ButtonPin){
	DIO_init(ButtonPort,ButtonPin,0);
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_init>
 334:	08 95       	ret

00000336 <LED_init>:
#include "../../MCAL/Dio/dio.h"
#include "../../MCAL/Timer/timer.h"
#include "led.h"

void LED_init(uint8_t ledPort,uint8_t ledPin){
	DIO_init(ledPort,ledPin,1);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_init>
 33c:	08 95       	ret

0000033e <LED_on>:
}
void LED_on(uint8_t ledPort,uint8_t ledPin){
	DIO_write(ledPort,ledPin,1);
 33e:	41 e0       	ldi	r20, 0x01	; 1
 340:	0e 94 29 02 	call	0x452	; 0x452 <DIO_write>
 344:	08 95       	ret

00000346 <LED_off>:
}
void LED_off(uint8_t ledPort,uint8_t ledPin){
	DIO_write(ledPort,ledPin,0);
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	0e 94 29 02 	call	0x452	; 0x452 <DIO_write>
 34c:	08 95       	ret

0000034e <LED_toggle>:
}
void LED_toggle(uint8_t ledPort,uint8_t ledPin){
	DIO_toggle(ledPort,ledPin);
 34e:	0e 94 a1 02 	call	0x542	; 0x542 <DIO_toggle>
 352:	08 95       	ret

00000354 <main>:
		//BUTTON_read(Port_D,2, Pull_Down, &temp);
		//if(temp && !prev)
			//LED_toggle(Port_A, 0);
	//}
	
	app_init();
 354:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	app_start();
 358:	0e 94 88 00 	call	0x110	; 0x110 <app_start>
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	08 95       	ret

00000362 <DIO_init>:
					//*val = Read_bit(PINC,pin_num);
					*val = ((PINC & (1<<pin_num)) >> pin_num);
				break;
				
				case 'D':
					*val = Read_bit(PIND,pin_num);
 362:	82 34       	cpi	r24, 0x42	; 66
 364:	29 f1       	breq	.+74     	; 0x3b0 <DIO_init+0x4e>
 366:	18 f4       	brcc	.+6      	; 0x36e <DIO_init+0xc>
 368:	81 34       	cpi	r24, 0x41	; 65
 36a:	39 f0       	breq	.+14     	; 0x37a <DIO_init+0x18>
 36c:	08 95       	ret
 36e:	83 34       	cpi	r24, 0x43	; 67
 370:	d1 f1       	breq	.+116    	; 0x3e6 <DIO_init+0x84>
 372:	84 34       	cpi	r24, 0x44	; 68
 374:	09 f4       	brne	.+2      	; 0x378 <DIO_init+0x16>
 376:	52 c0       	rjmp	.+164    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 378:	08 95       	ret
 37a:	41 30       	cpi	r20, 0x01	; 1
 37c:	59 f4       	brne	.+22     	; 0x394 <DIO_init+0x32>
 37e:	2a b3       	in	r18, 0x1a	; 26
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_init+0x28>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	6a 95       	dec	r22
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_init+0x24>
 38e:	82 2b       	or	r24, r18
 390:	8a bb       	out	0x1a, r24	; 26
 392:	08 95       	ret
 394:	41 11       	cpse	r20, r1
 396:	5c c0       	rjmp	.+184    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 398:	2a b3       	in	r18, 0x1a	; 26
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_init+0x42>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_init+0x3e>
 3a8:	80 95       	com	r24
 3aa:	82 23       	and	r24, r18
 3ac:	8a bb       	out	0x1a, r24	; 26
 3ae:	08 95       	ret
 3b0:	41 30       	cpi	r20, 0x01	; 1
 3b2:	59 f4       	brne	.+22     	; 0x3ca <DIO_init+0x68>
 3b4:	27 b3       	in	r18, 0x17	; 23
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_init+0x5e>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_init+0x5a>
 3c4:	82 2b       	or	r24, r18
 3c6:	87 bb       	out	0x17, r24	; 23
 3c8:	08 95       	ret
 3ca:	41 11       	cpse	r20, r1
 3cc:	41 c0       	rjmp	.+130    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3ce:	27 b3       	in	r18, 0x17	; 23
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_init+0x78>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_init+0x74>
 3de:	80 95       	com	r24
 3e0:	82 23       	and	r24, r18
 3e2:	87 bb       	out	0x17, r24	; 23
 3e4:	08 95       	ret
 3e6:	41 30       	cpi	r20, 0x01	; 1
 3e8:	59 f4       	brne	.+22     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3ea:	24 b3       	in	r18, 0x14	; 20
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_init+0x94>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	6a 95       	dec	r22
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_init+0x90>
 3fa:	82 2b       	or	r24, r18
 3fc:	84 bb       	out	0x14, r24	; 20
 3fe:	08 95       	ret
 400:	41 11       	cpse	r20, r1
 402:	26 c0       	rjmp	.+76     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 404:	24 b3       	in	r18, 0x14	; 20
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	80 95       	com	r24
 416:	82 23       	and	r24, r18
 418:	84 bb       	out	0x14, r24	; 20
 41a:	08 95       	ret
 41c:	41 30       	cpi	r20, 0x01	; 1
 41e:	59 f4       	brne	.+22     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 420:	21 b3       	in	r18, 0x11	; 17
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	82 2b       	or	r24, r18
 432:	81 bb       	out	0x11, r24	; 17
 434:	08 95       	ret
 436:	41 11       	cpse	r20, r1
 438:	0b c0       	rjmp	.+22     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 43a:	21 b3       	in	r18, 0x11	; 17
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	80 95       	com	r24
 44c:	82 23       	and	r24, r18
 44e:	81 bb       	out	0x11, r24	; 17
 450:	08 95       	ret

00000452 <DIO_write>:
 452:	82 34       	cpi	r24, 0x42	; 66
 454:	29 f1       	breq	.+74     	; 0x4a0 <DIO_write+0x4e>
 456:	18 f4       	brcc	.+6      	; 0x45e <DIO_write+0xc>
 458:	81 34       	cpi	r24, 0x41	; 65
 45a:	39 f0       	breq	.+14     	; 0x46a <DIO_write+0x18>
 45c:	08 95       	ret
 45e:	83 34       	cpi	r24, 0x43	; 67
 460:	d1 f1       	breq	.+116    	; 0x4d6 <DIO_write+0x84>
 462:	84 34       	cpi	r24, 0x44	; 68
 464:	09 f4       	brne	.+2      	; 0x468 <DIO_write+0x16>
 466:	52 c0       	rjmp	.+164    	; 0x50c <DIO_write+0xba>
 468:	08 95       	ret
 46a:	41 30       	cpi	r20, 0x01	; 1
 46c:	59 f4       	brne	.+22     	; 0x484 <DIO_write+0x32>
 46e:	2b b3       	in	r18, 0x1b	; 27
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_write+0x28>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_write+0x24>
 47e:	82 2b       	or	r24, r18
 480:	8b bb       	out	0x1b, r24	; 27
 482:	08 95       	ret
 484:	41 11       	cpse	r20, r1
 486:	5c c0       	rjmp	.+184    	; 0x540 <DIO_write+0xee>
 488:	2b b3       	in	r18, 0x1b	; 27
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_write+0x42>
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_write+0x3e>
 498:	80 95       	com	r24
 49a:	82 23       	and	r24, r18
 49c:	8b bb       	out	0x1b, r24	; 27
 49e:	08 95       	ret
 4a0:	41 30       	cpi	r20, 0x01	; 1
 4a2:	59 f4       	brne	.+22     	; 0x4ba <DIO_write+0x68>
 4a4:	28 b3       	in	r18, 0x18	; 24
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_write+0x5e>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_write+0x5a>
 4b4:	82 2b       	or	r24, r18
 4b6:	88 bb       	out	0x18, r24	; 24
 4b8:	08 95       	ret
 4ba:	41 11       	cpse	r20, r1
 4bc:	41 c0       	rjmp	.+130    	; 0x540 <DIO_write+0xee>
 4be:	28 b3       	in	r18, 0x18	; 24
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_write+0x78>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_write+0x74>
 4ce:	80 95       	com	r24
 4d0:	82 23       	and	r24, r18
 4d2:	88 bb       	out	0x18, r24	; 24
 4d4:	08 95       	ret
 4d6:	41 30       	cpi	r20, 0x01	; 1
 4d8:	59 f4       	brne	.+22     	; 0x4f0 <DIO_write+0x9e>
 4da:	25 b3       	in	r18, 0x15	; 21
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_write+0x94>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_write+0x90>
 4ea:	82 2b       	or	r24, r18
 4ec:	85 bb       	out	0x15, r24	; 21
 4ee:	08 95       	ret
 4f0:	41 11       	cpse	r20, r1
 4f2:	26 c0       	rjmp	.+76     	; 0x540 <DIO_write+0xee>
 4f4:	25 b3       	in	r18, 0x15	; 21
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_write+0xae>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_write+0xaa>
 504:	80 95       	com	r24
 506:	82 23       	and	r24, r18
 508:	85 bb       	out	0x15, r24	; 21
 50a:	08 95       	ret
 50c:	41 30       	cpi	r20, 0x01	; 1
 50e:	59 f4       	brne	.+22     	; 0x526 <DIO_write+0xd4>
 510:	22 b3       	in	r18, 0x12	; 18
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_write+0xca>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	6a 95       	dec	r22
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_write+0xc6>
 520:	82 2b       	or	r24, r18
 522:	82 bb       	out	0x12, r24	; 18
 524:	08 95       	ret
 526:	41 11       	cpse	r20, r1
 528:	0b c0       	rjmp	.+22     	; 0x540 <DIO_write+0xee>
 52a:	22 b3       	in	r18, 0x12	; 18
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_write+0xe4>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	6a 95       	dec	r22
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_write+0xe0>
 53a:	80 95       	com	r24
 53c:	82 23       	and	r24, r18
 53e:	82 bb       	out	0x12, r24	; 18
 540:	08 95       	ret

00000542 <DIO_toggle>:
				
			}
}

void DIO_toggle(uint8_t port_num,uint8_t pin_num){
	switch(port_num){
 542:	82 34       	cpi	r24, 0x42	; 66
 544:	a1 f0       	breq	.+40     	; 0x56e <DIO_toggle+0x2c>
 546:	18 f4       	brcc	.+6      	; 0x54e <DIO_toggle+0xc>
 548:	81 34       	cpi	r24, 0x41	; 65
 54a:	31 f0       	breq	.+12     	; 0x558 <DIO_toggle+0x16>
 54c:	08 95       	ret
 54e:	83 34       	cpi	r24, 0x43	; 67
 550:	c9 f0       	breq	.+50     	; 0x584 <DIO_toggle+0x42>
 552:	84 34       	cpi	r24, 0x44	; 68
 554:	11 f1       	breq	.+68     	; 0x59a <DIO_toggle+0x58>
 556:	08 95       	ret
		case 'A':
			Toggle_bit(PORTA,pin_num);
 558:	2b b3       	in	r18, 0x1b	; 27
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_toggle+0x22>
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	6a 95       	dec	r22
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_toggle+0x1e>
 568:	82 27       	eor	r24, r18
 56a:	8b bb       	out	0x1b, r24	; 27
		break;
 56c:	08 95       	ret
		
		case 'B':
			Toggle_bit(PORTB,pin_num);
 56e:	28 b3       	in	r18, 0x18	; 24
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_toggle+0x38>
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_toggle+0x34>
 57e:	82 27       	eor	r24, r18
 580:	88 bb       	out	0x18, r24	; 24
		break;
 582:	08 95       	ret
		
		case 'C':
			Toggle_bit(PORTC,pin_num);
 584:	25 b3       	in	r18, 0x15	; 21
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	02 c0       	rjmp	.+4      	; 0x590 <DIO_toggle+0x4e>
 58c:	88 0f       	add	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	6a 95       	dec	r22
 592:	e2 f7       	brpl	.-8      	; 0x58c <DIO_toggle+0x4a>
 594:	82 27       	eor	r24, r18
 596:	85 bb       	out	0x15, r24	; 21
		break;
 598:	08 95       	ret
		
		case 'D':
			Toggle_bit(PORTD,pin_num);
 59a:	22 b3       	in	r18, 0x12	; 18
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_toggle+0x64>
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	6a 95       	dec	r22
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_toggle+0x60>
 5aa:	82 27       	eor	r24, r18
 5ac:	82 bb       	out	0x12, r24	; 18
 5ae:	08 95       	ret

000005b0 <timer0_start>:
	TCCR1B &= ~((1<<0) | (1<<1) | (1<<2));
	
} // stop timer
uint8_t timer1_state(){
	return (((TIFR &(1<<2))>>2) == 1);
} // checks for overflow flag
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	00 d0       	rcall	.+0      	; 0x5b6 <timer0_start+0x6>
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <timer0_start+0x8>
 5b8:	1f 92       	push	r1
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
 5be:	49 83       	std	Y+1, r20	; 0x01
 5c0:	5a 83       	std	Y+2, r21	; 0x02
 5c2:	6b 83       	std	Y+3, r22	; 0x03
 5c4:	7c 83       	std	Y+4, r23	; 0x04
 5c6:	8d 83       	std	Y+5, r24	; 0x05
 5c8:	8c 81       	ldd	r24, Y+4	; 0x04
 5ca:	9d 81       	ldd	r25, Y+5	; 0x05
 5cc:	80 34       	cpi	r24, 0x40	; 64
 5ce:	91 05       	cpc	r25, r1
 5d0:	19 f1       	breq	.+70     	; 0x618 <timer0_start+0x68>
 5d2:	30 f4       	brcc	.+12     	; 0x5e0 <timer0_start+0x30>
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	91 05       	cpc	r25, r1
 5d8:	59 f0       	breq	.+22     	; 0x5f0 <timer0_start+0x40>
 5da:	08 97       	sbiw	r24, 0x08	; 8
 5dc:	99 f0       	breq	.+38     	; 0x604 <timer0_start+0x54>
 5de:	39 c0       	rjmp	.+114    	; 0x652 <timer0_start+0xa2>
 5e0:	81 15       	cp	r24, r1
 5e2:	21 e0       	ldi	r18, 0x01	; 1
 5e4:	92 07       	cpc	r25, r18
 5e6:	11 f1       	breq	.+68     	; 0x62c <timer0_start+0x7c>
 5e8:	81 15       	cp	r24, r1
 5ea:	94 40       	sbci	r25, 0x04	; 4
 5ec:	49 f1       	breq	.+82     	; 0x640 <timer0_start+0x90>
 5ee:	31 c0       	rjmp	.+98     	; 0x652 <timer0_start+0xa2>
 5f0:	83 b7       	in	r24, 0x33	; 51
 5f2:	81 60       	ori	r24, 0x01	; 1
 5f4:	83 bf       	out	0x33, r24	; 51
 5f6:	83 b7       	in	r24, 0x33	; 51
 5f8:	8d 7f       	andi	r24, 0xFD	; 253
 5fa:	83 bf       	out	0x33, r24	; 51
 5fc:	83 b7       	in	r24, 0x33	; 51
 5fe:	8b 7f       	andi	r24, 0xFB	; 251
 600:	83 bf       	out	0x33, r24	; 51
 602:	27 c0       	rjmp	.+78     	; 0x652 <timer0_start+0xa2>
 604:	83 b7       	in	r24, 0x33	; 51
 606:	8e 7f       	andi	r24, 0xFE	; 254
 608:	83 bf       	out	0x33, r24	; 51
 60a:	83 b7       	in	r24, 0x33	; 51
 60c:	82 60       	ori	r24, 0x02	; 2
 60e:	83 bf       	out	0x33, r24	; 51
 610:	83 b7       	in	r24, 0x33	; 51
 612:	8b 7f       	andi	r24, 0xFB	; 251
 614:	83 bf       	out	0x33, r24	; 51
 616:	1d c0       	rjmp	.+58     	; 0x652 <timer0_start+0xa2>
 618:	83 b7       	in	r24, 0x33	; 51
 61a:	81 60       	ori	r24, 0x01	; 1
 61c:	83 bf       	out	0x33, r24	; 51
 61e:	83 b7       	in	r24, 0x33	; 51
 620:	82 60       	ori	r24, 0x02	; 2
 622:	83 bf       	out	0x33, r24	; 51
 624:	83 b7       	in	r24, 0x33	; 51
 626:	8b 7f       	andi	r24, 0xFB	; 251
 628:	83 bf       	out	0x33, r24	; 51
 62a:	13 c0       	rjmp	.+38     	; 0x652 <timer0_start+0xa2>
 62c:	83 b7       	in	r24, 0x33	; 51
 62e:	8e 7f       	andi	r24, 0xFE	; 254
 630:	83 bf       	out	0x33, r24	; 51
 632:	83 b7       	in	r24, 0x33	; 51
 634:	8d 7f       	andi	r24, 0xFD	; 253
 636:	83 bf       	out	0x33, r24	; 51
 638:	83 b7       	in	r24, 0x33	; 51
 63a:	84 60       	ori	r24, 0x04	; 4
 63c:	83 bf       	out	0x33, r24	; 51
 63e:	09 c0       	rjmp	.+18     	; 0x652 <timer0_start+0xa2>
 640:	83 b7       	in	r24, 0x33	; 51
 642:	81 60       	ori	r24, 0x01	; 1
 644:	83 bf       	out	0x33, r24	; 51
 646:	83 b7       	in	r24, 0x33	; 51
 648:	8d 7f       	andi	r24, 0xFD	; 253
 64a:	83 bf       	out	0x33, r24	; 51
 64c:	83 b7       	in	r24, 0x33	; 51
 64e:	84 60       	ori	r24, 0x04	; 4
 650:	83 bf       	out	0x33, r24	; 51
 652:	0f 90       	pop	r0
 654:	0f 90       	pop	r0
 656:	0f 90       	pop	r0
 658:	0f 90       	pop	r0
 65a:	0f 90       	pop	r0
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	08 95       	ret

00000662 <timer0_stop>:
 662:	83 b7       	in	r24, 0x33	; 51
 664:	88 7f       	andi	r24, 0xF8	; 248
 666:	83 bf       	out	0x33, r24	; 51
 668:	08 95       	ret

0000066a <timer0_state>:
 66a:	88 b7       	in	r24, 0x38	; 56
 66c:	81 70       	andi	r24, 0x01	; 1
 66e:	08 95       	ret

00000670 <timer1_set_val>:

void timer1_set_val(unsigned int val){
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	00 d0       	rcall	.+0      	; 0x676 <timer1_set_val+0x6>
 676:	cd b7       	in	r28, 0x3d	; 61
 678:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned p = (val & 0xFF00);
 67a:	9c 01       	movw	r18, r24
 67c:	22 27       	eor	r18, r18
 67e:	3a 83       	std	Y+2, r19	; 0x02
 680:	29 83       	std	Y+1, r18	; 0x01
	TCNT1H = (val & 0xFF00)>>8;
 682:	9d bd       	out	0x2d, r25	; 45
	TCNT1L = (val & 0x00FF);
 684:	8c bd       	out	0x2c, r24	; 44
}
 686:	0f 90       	pop	r0
 688:	0f 90       	pop	r0
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	08 95       	ret

00000690 <timer1_init>:
//********************************************************************************************************************************************
//********************************************************************************************************************************************
//********************************************************************************************************************************************


void timer1_init(Timer timer){
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	00 d0       	rcall	.+0      	; 0x696 <timer1_init+0x6>
 696:	00 d0       	rcall	.+0      	; 0x698 <timer1_init+0x8>
 698:	1f 92       	push	r1
 69a:	cd b7       	in	r28, 0x3d	; 61
 69c:	de b7       	in	r29, 0x3e	; 62
 69e:	5a 83       	std	Y+2, r21	; 0x02
 6a0:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer.mode){
 6a2:	41 11       	cpse	r20, r1
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <timer1_init+0x1a>
		case normal:
			TCCR1A = 0x00;
 6a6:	1f bc       	out	0x2f, r1	; 47
			TCCR1B = 0X00;
 6a8:	1e bc       	out	0x2e, r1	; 46
		//Set_bit(TCCR0,3);
		//break;
		default:
			break;
	}
	timer1_set_val(timer.initial);
 6aa:	8a 81       	ldd	r24, Y+2	; 0x02
 6ac:	9b 81       	ldd	r25, Y+3	; 0x03
 6ae:	0e 94 38 03 	call	0x670	; 0x670 <timer1_set_val>
} // initialize timer
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	0f 90       	pop	r0
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <_exit>:
 6c2:	f8 94       	cli

000006c4 <__stop_program>:
 6c4:	ff cf       	rjmp	.-2      	; 0x6c4 <__stop_program>
